<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on 전체글보기</title>
    <link>https://jordi02183.github.io/categories/data-structure/</link>
    <description>Recent content in Data Structure on 전체글보기</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>sjc02183@naver.com (ChangHakKim)</managingEditor>
    <webMaster>sjc02183@naver.com (ChangHakKim)</webMaster>
    <lastBuildDate>Mon, 11 May 2020 14:46:42 +0900</lastBuildDate>
    
	<atom:link href="https://jordi02183.github.io/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>빅오(Big-Oh)와 시간복잡도(Time-Complexity)</title>
      <link>https://jordi02183.github.io/post/testpage/</link>
      <pubDate>Mon, 11 May 2020 14:46:42 +0900</pubDate>
      <author>sjc02183@naver.com (ChangHakKim)</author>
      <guid>https://jordi02183.github.io/post/testpage/</guid>
      <description>소개 한정되어 있는 자원에서 그 자원을 항상 효율적으로 사용해야 할 때, 어떤 알고리즘이 좋은 알고리즘일까? 간단하게 두 가지 기준을 두어보자.
  빠르게 실행되고(실행시간)
  자리를 적게 차지하는(기억장소) 알고리즘
  을 좋은 알고리즘이라고 생각할 수 있다. 실제로 데이터구조와 알고리즘에 대한 공부는 이 분석 방법에 대한 배경지식 없이는 무의미하다고 할 수 있다. 실행시간이 빠르더라도 기억장소 요구량이 크거나, 기억장소 요구량은 많지 않지만 실행시간이 느리다면 좋은 프로그램이라 할 수 없다.
하지만 기억장치 제조기술이 눈부시게 발전하면서 기억장치 제조기술 발전과 기억장치 값 하락이 맞물려 기억장소 활용법에 대해서는 어느정도 관대해지는 경향이 있어 최근의 알고리즘은 실행시간을 줄이는 것을 위주로 하고 있고, Dynamic Programming(다이나믹 프로그래밍)같이 공간을 마구 사용해서 시간복잡도를 줄이는 변태적인 방법까지 사용하고 있다.</description>
    </item>
    
  </channel>
</rss>